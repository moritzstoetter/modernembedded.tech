---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import { findBlogpostsByTags } from "../../lib/articles/util";
import ArticlePreview from "../business/ArticlePreview.astro";

const { slug } = Astro.params;
const lang = getLangFromUrl(Astro.url);

const blogPosts = await getCollection("blog");

const blogPost = blogPosts.find((s) => s.slug === `${lang}/${slug}`);

const formattedDate = blogPost?.data.date.toLocaleString(lang);

const rendering = await blogPost?.render();

const relatedArticles = await findBlogpostsByTags(
  lang,
  blogPost?.data.tags ?? [],
  slug,
);

const t = useTranslations(lang);
---

{
  !!blogPost && !!rendering ? (
    <article class="flex flex-col gap-4 px-4 pb-8 mx-4 md:px-0 lg:mx-0">
      <h1>{blogPost.data.title}</h1>
      <Image src={blogPost.data.image} alt={blogPost.data.imageAlt} />
      <div class="pb-8 prose dark:prose-headings:text-textDark max-w-none lg:prose-xl">
        <rendering.Content />
      </div>
      <h6>{blogPost.data.date.toISOString().slice(0,10)}</h6>

      {relatedArticles?.length > 0 && (
        <>
          <h2>{t("common.relatedBlogArticles")}</h2>
          <div class="grid grid-cols-1 gap-8 md:grid-cols-3">
            {relatedArticles.map((article) => (
              <ArticlePreview article={article} />
            ))}
          </div>
        </>
      )}
    </article>
  ) : (
    <div>
      <h1>{t("blog.notFound")}</h1>
    </div>
  )
}
