---
import type { Testimonial as TestimonialType } from "../../content/config";
import Testimonial from "../../components/Testimonial.astro";

const testimonials = Astro.props.testimonials;

let currentIndexMobile = 0;
let currentIndexMedium = 0;
let currentIndexDesktop = 0;
const totalSlides = testimonials.length;
---

<div class="relative slider-wrapper">
  <!-- Mobile Slider -->
  <div class="hidden sm:flex md:hidden items-center w-full gap-2">
    <div class="flex-1 overflow-hidden slider-container">
      <div
        class="flex transition-transform duration-500 slides"
        style={`transform: translateX(-${100 * currentIndexMobile}%)`}
      >
        {
          testimonials.map((testimonial: any, index: number) => (
            <div
              class={`px-4 slide ${index === currentIndexMobile ? "active" : ""} flex-none w-full`}
            >
              <Testimonial testimonial={testimonial.data} />
            </div>
          ))
        }
      </div>
    </div>
  </div>

  <!-- Medium Slider -->
  <div class="hidden md:flex lg:hidden items-center w-full gap-2">
    {
      totalSlides > 1 && (
        <button class="caret-left w-12 h-12">
          <svg
            class="w-full h-full fill-textLight dark:fill-textDark"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 320 512"
          >
            <path d="M96.3 273l128 128c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L129.5 256l127.7-127.7c-9.4-9.4-9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-128 128c-9.4 9.4-9.4 24.6 0 33.9z" />
          </svg>
        </button>
      )
    }
    <div class="flex-1 overflow-hidden slider-container">
      <div
        class="flex transition-transform duration-500 slides"
        style={`transform: translateX(-${100 * currentIndexMedium}%)`}
      >
        {
          testimonials.map((testimonial: any, index: number) => (
            <div
              class={`px-4 slide ${index === currentIndexMedium ? "active" : ""} flex-none w-full`}
            >
              <Testimonial testimonial={testimonial.data} />
            </div>
          ))
        }
      </div>
    </div>
    {
      totalSlides > 1 && (
        <button class="w-12 h-12 caret-right">
          <svg
            class="w-full h-full fill-textLight dark:fill-textDark"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 320 512"
          >
            <path d="M224.3 239l-128-128c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9L190.1 256l-127.7 127.7c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l128-128c9.4-9.4 9.4-24.6 0-33.9z" />
          </svg>
        </button>
      )
    }
  </div>

  <!-- Desktop Slider -->
  <div class="hidden lg:flex items-center w-full gap-2">
    {
      totalSlides > 3 && (
        <button class="caret-left lg:w-12 lg:h-12">
          <svg
            class="w-full h-full fill-textLight dark:fill-textDark"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 320 512"
          >
            <path d="M96.3 273l128 128c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L129.5 256l127.7-127.7c-9.4-9.4-9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-128 128c-9.4 9.4-9.4 24.6 0 33.9z" />
          </svg>
        </button>
      )
    }
    <div class="relative overflow-hidden slider-container">
      <div
        class="flex transition-transform duration-500 slides"
        style={`transform: translateX(-${(100 / 3) * currentIndexDesktop}%)`}
      >
        {
          testimonials.reverse().map((testimonial: any, index: number) => (
            <div
              class={`px-4 slide ${index === currentIndexDesktop ? "active" : ""} flex-none w-1/3`}
            >
              <Testimonial testimonial={testimonial.data} />
            </div>
          ))
        }
      </div>
    </div>
    {
      totalSlides > 3 && (
        <button class="lg:w-12 lg:h-12 caret-right">
          <svg
            class="w-full h-full fill-textLight dark:fill-textDark"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 320 512"
          >
            <path d="M224.3 239l-128-128c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9L190.1 256l-127.7 127.7c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l128-128c9.4-9.4 9.4-24.6 0-33.9z" />
          </svg>
        </button>
      )
    }
  </div>
</div>

<script>
  const interval_ms = 12000;

  let currentIndexMobile = 0;
  let currentIndexMedium = 0;
  let currentIndexDesktop = 0;

  document.addEventListener("DOMContentLoaded", () => {
    const mobileSlides = document.querySelectorAll(
      ".sm\\:hidden .slide",
    ).length;
    const mediumSlides = document.querySelectorAll(
      ".sm\\:flex.md\\:hidden .slide",
    ).length;
    const desktopSlides = document.querySelectorAll(".lg\\:flex .slide").length;

    function updateIndexMobile(newIndex: number) {
      currentIndexMobile = (newIndex + mobileSlides) % mobileSlides;
      const slidesElement = document.querySelector(
        ".hidden.sm\\:flex.md\\:hidden .slides"
      ) as HTMLElement;
      if (slidesElement) {
        slidesElement.style.transform = `translateX(-${100 * currentIndexMobile}%)`;
      }
    }

    // Add medium device update function
    function updateIndexMedium(newIndex: number) {
      currentIndexMedium = (newIndex + mediumSlides) % mediumSlides;
      const slidesElement = document.querySelector(
        ".hidden.md\\:flex .slides",
      ) as HTMLElement;
      if (slidesElement) {
        slidesElement.style.transform = `translateX(-${100 * currentIndexMedium}%)`;
      }
    }

    function updateIndexDesktop(newIndex: number) {
      if (newIndex >= desktopSlides - 2) {
        currentIndexDesktop = 0;
      } else {
        currentIndexDesktop = newIndex;
      }
      const slidesElement = document.querySelector(
        ".hidden.lg\\:flex .slides",
      ) as HTMLElement;
      if (slidesElement) {
        slidesElement.style.transform = `translateX(-${(100 / 3) * currentIndexDesktop}%)`;
      }
    }

    // Automatic sliding for mobile
    if (mobileSlides > 1) {
      setInterval(() => {
        updateIndexMobile(currentIndexMobile + 1);
      }, interval_ms);
    }

    // Add auto-sliding for medium devices
    if (mediumSlides > 1) {
      setInterval(() => {
        updateIndexMedium(currentIndexMedium + 1);
      }, interval_ms);
    }

    // Automatic sliding for desktop
    if (desktopSlides > 3) {
      setInterval(() => {
        updateIndexDesktop(currentIndexDesktop + 1);
      }, interval_ms);
    }

    // Handlers for manual sliding
    // if (mobileSlides > 1) {
    //   const leftButtonMobile = document.querySelector(".caret-left");
    //   const rightButtonMobile = document.querySelector(".caret-right");

    //   leftButtonMobile?.addEventListener("click", () => {
    //     updateIndexMobile(currentIndexMobile - 1);
    //   });

    //   rightButtonMobile?.addEventListener("click", () => {
    //     updateIndexMobile(currentIndexMobile + 1);
    //   });
    // }

    // Add click handlers for medium device buttons
    if (mediumSlides > 1) {
      const leftButtonMedium = document.querySelector(
        ".hidden.md\\:flex .caret-left",
      );
      const rightButtonMedium = document.querySelector(
        ".hidden.md\\:flex .caret-right",
      );

      leftButtonMedium?.addEventListener("click", () => {
        updateIndexMedium(currentIndexMedium - 1);
      });

      rightButtonMedium?.addEventListener("click", () => {
        updateIndexMedium(currentIndexMedium + 1);
      });
    }

    if (desktopSlides > 3) {
      const leftButtonDesktop = document.querySelector(
        ".hidden.lg\\:flex .caret-left",
      );
      const rightButtonDesktop = document.querySelector(
        ".hidden.lg\\:flex .caret-right",
      );

      leftButtonDesktop?.addEventListener("click", () => {
        updateIndexDesktop(currentIndexDesktop - 1);
      });

      rightButtonDesktop?.addEventListener("click", () => {
        updateIndexDesktop(currentIndexDesktop + 1);
      });
    }
  });
</script>

<style>
  .slider-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    width: 100%;
  }
  .slider-container {
    width: 100%;
    overflow: hidden;
  }
  .slides {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }
  .slide {
    flex: 0 0 auto;
  }
  .caret-left,
  .caret-right {
    color: white;
    padding: 0.5rem;
    cursor: pointer;
  }
</style>
