---
import type { Testimonial as TestimonialType } from "../../content/config";
import Testimonial from "../../components/Testimonial.astro";

const testimonials = Astro.props.testimonials;

let currentIndex = 0;
const totalSlides = testimonials.length;
---

<div class="items-center w-full gap-2 flex">
  <button class="caret-left w-12 h-12 md:flex sm:hidden">
    <svg
      class="w-full h-full fill-textLight dark:fill-textDark"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 320 512"
    >
      <path
        d="M96.3 273l128 128c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L129.5 256l127.7-127.7c-9.4-9.4-9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-128 128c-9.4 9.4-9.4 24.6 0 33.9z"
      ></path>
    </svg>
  </button>
  <div class="flex-1 overflow-hidden slider-container">
    <div class="flex transition-transform duration-500 slides">
      {
        testimonials.map((testimonial: any, index: number) => (
          <div class={"px-4 slide flex-none w-full lg:w-1/3"}>
            <Testimonial testimonial={testimonial.data} />
          </div>
        ))
      }
    </div>
  </div>
  <button class="caret-right w-12 h-12 md:flex sm:hidden">
    <svg
      class="w-full h-full fill-textLight dark:fill-textDark"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 320 512"
    >
      <path
        d="M224.3 239l-128-128c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9L190.1 256l-127.7 127.7c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l128-128c9.4-9.4 9.4-24.6 0-33.9z"
      ></path>
    </svg>
  </button>
</div>

<script>
  const interval_ms = 12000;
  const mod = (n:number, m:number) => ((n % m) + m) % m;

  let currentIndex = 0;

  document.addEventListener("DOMContentLoaded", () => {
    const slides = document.querySelectorAll(".slide");

    function updateIndex(newIndex: number) {
      console.log("slide_count " + slides.length + ", updateIndex " + newIndex);

      const slideWidth = (slides[0] as HTMLElement).offsetWidth;
      const slidesElement = document.querySelector(".slides") as HTMLElement;
      if (slidesElement) {
        const containerWidth = slidesElement.parentElement?.offsetWidth || 0;
        const visibleSlides = Math.floor(containerWidth / slideWidth);
        console.log("visible slides: " + visibleSlides);

        currentIndex = mod(newIndex, slides.length + 1 - visibleSlides);
        slidesElement.style.transform = `translateX(-${slideWidth * currentIndex}px)`;
    }
    }

    setInterval(() => {
      updateIndex(currentIndex + 1);
    }, interval_ms);

    const leftButton = document.querySelector(".caret-left");
    const rightButton = document.querySelector(".caret-right");

    leftButton?.addEventListener("click", () => {
      updateIndex(currentIndex - 1);
    });

    rightButton?.addEventListener("click", () => {
      console.log("right clicked");
      updateIndex(currentIndex + 1);
    });
  });
</script>

<style>
  .slider-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    width: 100%;
  }
  .slider-container {
    width: 100%;
    overflow: hidden;
  }
  .slides {
    display: flex;
    transition: transform 0.5s ease-in-out;
  }
  .slide {
    flex: 0 0 auto;
  }
  .caret-left,
  .caret-right {
    color: white;
    padding: 0.5rem;
    cursor: pointer;
  }
</style>
